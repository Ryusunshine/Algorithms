# 알고리즘 계산 복잡도는 다음 두 가지 척도로 표현될 수 있음
# 시간 복잡도: 얼마나 빠르게 실행되는지
# 공간 복잡도: 얼마나 많은 저장 공간이 필요한지

# 공간 복잡도(space complexity)

# 프로그램을 실행 및 완료하는데 필요한 저장공간의 양을 뜻함.
# 총 필요 저장공간
# 고정 공간( 알고리즘과 무관한 공간): 코드 저장공간, 단순 변수 및 상수
# 가변 공간(알고리즘 실행과 관련있는 공간): 실행 중 동적으로 필요한 공간

# 공간 복잡도 계산
# 공간 복잡도 계산은 알고리즘에서 실제 사용되는 저장 공간으로 계산하면 됨

# 공간 복잡도 예제1

# n! 팩토리얼 구하기 - 1
def factorial(n):
    fac = 1
    for index in range(2, n + 1):
        fac = fac * index #fac * index를 덮어씌우면서 곱한다

    return fac

print(factorial(3))
# n은 상수니깐 공간복잡도는 O(1)이다.
# 공간 복잡도 계산은 실제 알고리즘 실행시 사용되는 저장공간을 계산하면 됨


#공간 복잡도 예제 2

#n! 팩토리얼 구하기 - 2
def factorial2(n):
    if n >= 1:
        return n * factorial2(n - 1)
    else:
        return 1

print(factorial2(3))
# 재귀함수를 사용하였으므로, n에 따라, 변수 n이 n개가 만들어지게 됨
# 공간 복잡도는 O(n)

#정리

# 좋은 알고리즘은 실행 시간도 짧고, 저장 공간도 적게 쓰는 알고리즘
# 통상 둘 다를 만족시키기는 어려움
# 최근 대용량 시스템이 보편화되면서, 공간 복잡도보다는 시간 복잡도가 우선
# 그래서 알고리즘은 시간 복잡도가 중심





